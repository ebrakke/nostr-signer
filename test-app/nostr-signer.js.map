{"version":3,"file":"nostr-signer.js","sources":["../../src/pkg/sdk.ts"],"sourcesContent":["import type { Event } from 'nostr-tools';\nimport type { NostrRequest, NostrResponse } from '../lib';\n\ntype RelayPolicy = {\n    read: boolean;\n    write: boolean;\n};\n\n/**\n * Nostr signer class that communicates with a signer iframe\n */\nexport class Nostr {\n    private bunkerWindow: WindowProxy | null = null;\n    private pending: Map<string, {\n        resolve: (value: any) => void;\n        reject: (reason?: any) => void;\n    }>;\n\n    constructor(private readonly signerUrl: string) {\n        this.pending = new Map();\n    }\n\n    public async connect(): Promise<void> {\n        if (this.bunkerWindow && !this.bunkerWindow.closed) {\n            return;\n        }\n\n        this.bunkerWindow = window.open(this.signerUrl, 'NostrSigner', 'width=500,height=500');\n        window.addEventListener('message', (event) => {\n            const response = event.data as NostrResponse;\n            const promise = this.pending.get(response.id);\n            if (promise) {\n                if (response.error) {\n                    promise.reject(new Error(response.error));\n                } else {\n                    promise.resolve(response.result);\n                }\n                this.pending.delete(response.id);\n            }\n        });\n    }\n\n    /**\n     * Send a request to the signer\n     */\n    private async sendRequest<T extends Omit<NostrRequest, 'id'>>(request: T): Promise<any> {\n        const id = Math.random().toString(36).slice(2);\n        return new Promise((resolve, reject) => {\n            this.pending.set(id, { resolve, reject });\n            this.bunkerWindow?.postMessage({\n                ...request,\n                id\n            }, this.signerUrl);\n        });\n    }\n\n    /**\n     * Get the public key from the signer\n     */\n    async getPublicKey(): Promise<string> {\n        return this.sendRequest({ type: 'getPublicKey' });\n    }\n\n    /**\n     * Sign a Nostr event\n     */\n    async signEvent(event: {\n        created_at: number;\n        kind: number;\n        tags: string[][];\n        content: string;\n    }): Promise<Event> {\n        return this.sendRequest({\n            type: 'signEvent',\n            params: event\n        });\n    }\n\n    /**\n     * Get the relay configuration\n     */\n    async getRelays(): Promise<Record<string, RelayPolicy>> {\n        return this.sendRequest({ type: 'getRelays' });\n    }\n\n    /**\n     * NIP04 encrypt\n     */\n    async nip04Encrypt(pubkey: string, plaintext: string): Promise<string> {\n        return this.sendRequest({\n            type: 'nip04.encrypt',\n            params: { pubkey, plaintext }\n        });\n    }\n\n    /**\n     * NIP04 decrypt\n     */\n    async nip04Decrypt(pubkey: string, ciphertext: string): Promise<string> {\n        return this.sendRequest({\n            type: 'nip04.decrypt',\n            params: { pubkey, ciphertext }\n        });\n    }\n\n    /**\n     * NIP44 encrypt\n     */\n    async nip44Encrypt(pubkey: string, plaintext: string): Promise<string> {\n        return this.sendRequest({\n            type: 'nip44.encrypt',\n            params: { pubkey, plaintext }\n        });\n    }\n\n    /**\n     * NIP44 decrypt\n     */\n    async nip44Decrypt(pubkey: string, ciphertext: string): Promise<string> {\n        return this.sendRequest({\n            type: 'nip44.decrypt',\n            params: { pubkey, ciphertext }\n        });\n    }\n}"],"names":["g","f","exports","Nostr","signerUrl","__publicField","event","response","promise","request","id","resolve","reject","_a","pubkey","plaintext","ciphertext"],"mappings":"qKAWO,SAAAA,EAAAC,EAAA,CAAA,OAAA,SAAA,UAAA,OAAA,OAAA,IAAAA,EAAA,OAAA,EAAA,OAAA,QAAA,YAAA,OAAA,IAAA,OAAA,CAAA,SAAA,EAAAA,CAAA,GAAAD,EAAA,OAAA,WAAA,IAAA,WAAAA,GAAA,KAAAC,EAAAD,EAAA,YAAA,CAAA,CAAA,EAAA,GAAA,KAAA,SAAAE,EAAA,CAAA,aAAA,MAAMC,CAAM,CAOf,YAA6BC,EAAmB,CANxCC,EAAA,oBAAmC,MACnCA,EAAA,gBAKqB,KAAA,UAAAD,EACpB,KAAA,YAAc,GAAI,CAG3B,MAAa,SAAyB,CAC9B,KAAK,cAAgB,CAAC,KAAK,aAAa,SAI5C,KAAK,aAAe,OAAO,KAAK,KAAK,UAAW,cAAe,sBAAsB,EAC9E,OAAA,iBAAiB,UAAYE,GAAU,CAC1C,MAAMC,EAAWD,EAAM,KACjBE,EAAU,KAAK,QAAQ,IAAID,EAAS,EAAE,EACxCC,IACID,EAAS,MACTC,EAAQ,OAAO,IAAI,MAAMD,EAAS,KAAK,CAAC,EAEhCC,EAAA,QAAQD,EAAS,MAAM,EAE9B,KAAA,QAAQ,OAAOA,EAAS,EAAE,EACnC,CACH,EAAA,CAML,MAAc,YAAgDE,EAA0B,CAC9E,MAAAC,EAAK,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,CAAC,EAC7C,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CApCzC,IAAAC,EAqCK,KAAK,QAAQ,IAAIH,EAAI,CAAE,QAAAC,EAAS,OAAAC,EAAQ,GACxCC,EAAA,KAAK,eAAL,MAAAA,EAAmB,YAAY,CAC3B,GAAGJ,EACH,GAAAC,CAAA,EACD,KAAK,UAAS,CACpB,CAAA,CAML,MAAM,cAAgC,CAClC,OAAO,KAAK,YAAY,CAAE,KAAM,eAAgB,CAAA,CAMpD,MAAM,UAAUJ,EAKG,CACf,OAAO,KAAK,YAAY,CACpB,KAAM,YACN,OAAQA,CAAA,CACX,CAAA,CAML,MAAM,WAAkD,CACpD,OAAO,KAAK,YAAY,CAAE,KAAM,YAAa,CAAA,CAMjD,MAAM,aAAaQ,EAAgBC,EAAoC,CACnE,OAAO,KAAK,YAAY,CACpB,KAAM,gBACN,OAAQ,CAAE,OAAAD,EAAQ,UAAAC,CAAU,CAAA,CAC/B,CAAA,CAML,MAAM,aAAaD,EAAgBE,EAAqC,CACpE,OAAO,KAAK,YAAY,CACpB,KAAM,gBACN,OAAQ,CAAE,OAAAF,EAAQ,WAAAE,CAAW,CAAA,CAChC,CAAA,CAML,MAAM,aAAaF,EAAgBC,EAAoC,CACnE,OAAO,KAAK,YAAY,CACpB,KAAM,gBACN,OAAQ,CAAE,OAAAD,EAAQ,UAAAC,CAAU,CAAA,CAC/B,CAAA,CAML,MAAM,aAAaD,EAAgBE,EAAqC,CACpE,OAAO,KAAK,YAAY,CACpB,KAAM,gBACN,OAAQ,CAAE,OAAAF,EAAQ,WAAAE,CAAW,CAAA,CAChC,CAAA,CAET,CAAAd,EAAA,MAAAC,EAAA,OAAA,eAAAD,EAAA,OAAA,YAAA,CAAA,MAAA,QAAA,CAAA,CAAA,CAAA"}